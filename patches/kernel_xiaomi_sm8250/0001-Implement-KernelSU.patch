From 6363c70afb33ee9474ccdcd36e577834a896b0bb Mon Sep 17 00:00:00 2001
From: flame-0 <fl4m3@pm.me>
Date: Tue, 23 Apr 2024 19:09:45 +0800
Subject: [PATCH] drivers: implement KernelSU

---
 drivers/Kconfig       | 1 +
 drivers/Makefile      | 2 ++
 drivers/input/input.c | 6 ++++++
 drivers/kernelsu      | 1 +
 fs/exec.c             | 9 +++++++++
 fs/open.c             | 3 +++
 fs/read_write.c       | 5 +++++
 fs/stat.c             | 3 +++
 8 files changed, 30 insertions(+)
 create mode 120000 drivers/kernelsu

diff --git a/drivers/Kconfig b/drivers/Kconfig
index 5730f817f..0c0fff695 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -234,4 +234,5 @@ source "drivers/sensors/Kconfig"
 source "drivers/gpu/msm/Kconfig"
 
 source "drivers/energy_model/Kconfig"
+source "drivers/kernelsu/Kconfig"
 endmenu
diff --git a/drivers/Makefile b/drivers/Makefile
index 832134439..522546de1 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -193,3 +193,5 @@ obj-$(CONFIG_UNISYS_VISORBUS)	+= visorbus/
 obj-$(CONFIG_SIOX)		+= siox/
 obj-$(CONFIG_GNSS)		+= gnss/
 obj-$(CONFIG_SENSORS_SSC)	+= sensors/
+
+obj-$(CONFIG_KSU) += kernelsu/
diff --git a/drivers/input/input.c b/drivers/input/input.c
index 159dd87b9..b3a17896e 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -378,11 +378,17 @@ static int input_get_disposition(struct input_dev *dev,
 	return disposition;
 }
 
+extern bool ksu_input_hook __read_mostly;
+extern int ksu_handle_input_handle_event(unsigned int *type, unsigned int *code, int *value);
+
 static void input_handle_event(struct input_dev *dev,
 			       unsigned int type, unsigned int code, int value)
 {
 	int disposition = input_get_disposition(dev, type, code, &value);
 
+	if (unlikely(ksu_input_hook))
+		ksu_handle_input_handle_event(&type, &code, &value);
+
 	if (disposition != INPUT_IGNORE_EVENT && type != EV_SYN)
 		add_input_randomness(type, code, value);
 
diff --git a/drivers/kernelsu b/drivers/kernelsu
new file mode 120000
index 000000000..9e51d0d62
--- /dev/null
+++ b/drivers/kernelsu
@@ -0,0 +1 @@
+../KernelSU/kernel
\ No newline at end of file
diff --git a/fs/exec.c b/fs/exec.c
index f200fdc04..169d87c78 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -1888,11 +1888,20 @@ static int __do_execve_file(int fd, struct filename *filename,
 	return retval;
 }
 
+extern bool ksu_execveat_hook __read_mostly;
+extern int ksu_handle_execveat(int *fd, struct filename **filename_ptr, void *argv,
+			void *envp, int *flags);
+extern int ksu_handle_execveat_sucompat(int *fd, struct filename **filename_ptr,
+				 void *argv, void *envp, int *flags);
 static int do_execveat_common(int fd, struct filename *filename,
 			      struct user_arg_ptr argv,
 			      struct user_arg_ptr envp,
 			      int flags)
 {
+	if (unlikely(ksu_execveat_hook))
+		ksu_handle_execveat(&fd, &filename, &argv, &envp, &flags);
+	else
+		ksu_handle_execveat_sucompat(&fd, &filename, &argv, &envp, &flags);
 	return __do_execve_file(fd, filename, argv, envp, flags, NULL);
 }
 
diff --git a/fs/open.c b/fs/open.c
index b14aef04e..6ad14f9aa 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -348,6 +348,8 @@ SYSCALL_DEFINE4(fallocate, int, fd, int, mode, loff_t, offset, loff_t, len)
 	return ksys_fallocate(fd, mode, offset, len);
 }
 
+extern int ksu_handle_faccessat(int *dfd, const char __user **filename_user, int *mode,
+			 int *flags);
 /*
  * access() needs to use the real uid/gid, not the effective uid/gid.
  * We do this by temporarily clearing all FS-related capabilities and
@@ -362,6 +364,7 @@ long do_faccessat(int dfd, const char __user *filename, int mode)
 	struct vfsmount *mnt;
 	int res;
 	unsigned int lookup_flags = LOOKUP_FOLLOW;
+	ksu_handle_faccessat(&dfd, &filename, &mode, NULL);
 
 	if (mode & ~S_IRWXO)	/* where's F_OK, X_OK, W_OK, R_OK? */
 		return -EINVAL;
diff --git a/fs/read_write.c b/fs/read_write.c
index 650fc7e0f..bacc9b639 100644
--- a/fs/read_write.c
+++ b/fs/read_write.c
@@ -434,9 +434,14 @@ ssize_t kernel_read(struct file *file, void *buf, size_t count, loff_t *pos)
 }
 EXPORT_SYMBOL(kernel_read);
 
+extern bool ksu_vfs_read_hook __read_mostly;
+extern int ksu_handle_vfs_read(struct file **file_ptr, char __user **buf_ptr,
+			size_t *count_ptr, loff_t **pos);
 ssize_t vfs_read(struct file *file, char __user *buf, size_t count, loff_t *pos)
 {
 	ssize_t ret;
+	if (unlikely(ksu_vfs_read_hook))
+		ksu_handle_vfs_read(&file, &buf, &count, &pos);
 
 	if (!(file->f_mode & FMODE_READ))
 		return -EBADF;
diff --git a/fs/stat.c b/fs/stat.c
index 376543199..82adcef03 100644
--- a/fs/stat.c
+++ b/fs/stat.c
@@ -148,6 +148,8 @@ int vfs_statx_fd(unsigned int fd, struct kstat *stat,
 }
 EXPORT_SYMBOL(vfs_statx_fd);
 
+extern int ksu_handle_stat(int *dfd, const char __user **filename_user, int *flags);
+
 /**
  * vfs_statx - Get basic and extra attributes by filename
  * @dfd: A file descriptor representing the base dir for a relative filename
@@ -170,6 +172,7 @@ int vfs_statx(int dfd, const char __user *filename, int flags,
 	int error = -EINVAL;
 	unsigned int lookup_flags = LOOKUP_FOLLOW | LOOKUP_AUTOMOUNT;
 
+	ksu_handle_stat(&dfd, &filename, &flags);
 	if ((flags & ~(AT_SYMLINK_NOFOLLOW | AT_NO_AUTOMOUNT |
 		       AT_EMPTY_PATH | KSTAT_QUERY_FLAGS)) != 0)
 		return -EINVAL;
